--
-- Script was generated by Devart dbForge Studio 2020 for MySQL, Version 9.0.338.0
-- Product home page: http://www.devart.com/dbforge/mysql/studio
-- Script date 11/29/2021 3:50:48 PM
-- Server version: 5.6.26
-- Client version: 4.1
--

-- 
-- Disable foreign keys
-- 
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;

-- 
-- Set SQL mode
-- 
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

-- 
-- Set character set the client will use to send SQL statements to the server
--
SET NAMES 'utf8';

--
-- Set default database
--
USE db_a7ca4c_bkzalo;

--
-- Drop procedure `Proc_DeleteCommentById`
--
DROP PROCEDURE IF EXISTS Proc_DeleteCommentById;

--
-- Drop procedure `Proc_GetAccountById`
--
DROP PROCEDURE IF EXISTS Proc_GetAccountById;

--
-- Drop procedure `Proc_GetComment`
--
DROP PROCEDURE IF EXISTS Proc_GetComment;

--
-- Drop procedure `Proc_GetCommentById`
--
DROP PROCEDURE IF EXISTS Proc_GetCommentById;

--
-- Drop procedure `Proc_InsertAccount`
--
DROP PROCEDURE IF EXISTS Proc_InsertAccount;

--
-- Drop procedure `Proc_InsertComment`
--
DROP PROCEDURE IF EXISTS Proc_InsertComment;

--
-- Drop procedure `Proc_UpdateAccount`
--
DROP PROCEDURE IF EXISTS Proc_UpdateAccount;

--
-- Drop procedure `Proc_UpdateComment`
--
DROP PROCEDURE IF EXISTS Proc_UpdateComment;

--
-- Drop table `account`
--
DROP TABLE IF EXISTS account;

--
-- Drop table `block`
--
DROP TABLE IF EXISTS block;

--
-- Drop table `comment`
--
DROP TABLE IF EXISTS comment;

--
-- Drop table `report`
--
DROP TABLE IF EXISTS report;

--
-- Drop procedure `Proc_CheckNewPost`
--
DROP PROCEDURE IF EXISTS Proc_CheckNewPost;

--
-- Drop procedure `Proc_DeletePostById`
--
DROP PROCEDURE IF EXISTS Proc_DeletePostById;

--
-- Drop procedure `Proc_GetPagingPost`
--
DROP PROCEDURE IF EXISTS Proc_GetPagingPost;

--
-- Drop procedure `Proc_GetPostById`
--
DROP PROCEDURE IF EXISTS Proc_GetPostById;

--
-- Drop procedure `Proc_InsertPost`
--
DROP PROCEDURE IF EXISTS Proc_InsertPost;

--
-- Drop procedure `Proc_UpdatePost`
--
DROP PROCEDURE IF EXISTS Proc_UpdatePost;

--
-- Drop table `post`
--
DROP TABLE IF EXISTS post;

--
-- Drop procedure `Proc_DeleteFriendById`
--
DROP PROCEDURE IF EXISTS Proc_DeleteFriendById;

--
-- Drop procedure `Proc_GetCountRequested`
--
DROP PROCEDURE IF EXISTS Proc_GetCountRequested;

--
-- Drop procedure `Proc_GetCountUserFriends`
--
DROP PROCEDURE IF EXISTS Proc_GetCountUserFriends;

--
-- Drop procedure `Proc_GetFriend`
--
DROP PROCEDURE IF EXISTS Proc_GetFriend;

--
-- Drop procedure `Proc_GetRequestedFriend`
--
DROP PROCEDURE IF EXISTS Proc_GetRequestedFriend;

--
-- Drop procedure `Proc_GetUserFriends`
--
DROP PROCEDURE IF EXISTS Proc_GetUserFriends;

--
-- Drop procedure `Proc_InsertFriend`
--
DROP PROCEDURE IF EXISTS Proc_InsertFriend;

--
-- Drop procedure `Proc_UpdateFriend`
--
DROP PROCEDURE IF EXISTS Proc_UpdateFriend;

--
-- Drop table `friend`
--
DROP TABLE IF EXISTS friend;

--
-- Drop procedure `Proc_DeleteMessageById`
--
DROP PROCEDURE IF EXISTS Proc_DeleteMessageById;

--
-- Drop procedure `Proc_GetLastMessage`
--
DROP PROCEDURE IF EXISTS Proc_GetLastMessage;

--
-- Drop procedure `Proc_GetMessageById`
--
DROP PROCEDURE IF EXISTS Proc_GetMessageById;

--
-- Drop procedure `Proc_GetMessages`
--
DROP PROCEDURE IF EXISTS Proc_GetMessages;

--
-- Drop procedure `Proc_InsertMessage`
--
DROP PROCEDURE IF EXISTS Proc_InsertMessage;

--
-- Drop table `message`
--
DROP TABLE IF EXISTS message;

--
-- Drop procedure `Proc_GetConversationById`
--
DROP PROCEDURE IF EXISTS Proc_GetConversationById;

--
-- Drop procedure `Proc_GetPagingConversation`
--
DROP PROCEDURE IF EXISTS Proc_GetPagingConversation;

--
-- Drop procedure `Proc_InsertConversation`
--
DROP PROCEDURE IF EXISTS Proc_InsertConversation;

--
-- Drop table `conversation`
--
DROP TABLE IF EXISTS conversation;

--
-- Drop procedure `Proc_InsertTokenAccount`
--
DROP PROCEDURE IF EXISTS Proc_InsertTokenAccount;

--
-- Drop table `tokenaccount`
--
DROP TABLE IF EXISTS tokenaccount;

--
-- Set default database
--
USE db_a7ca4c_bkzalo;

--
-- Create table `tokenaccount`
--
CREATE TABLE tokenaccount (
  Token varchar(255) NOT NULL DEFAULT '',
  PhoneNumber varchar(30) DEFAULT NULL,
  CreatedAt datetime DEFAULT NULL,
  ModifiedAt datetime DEFAULT NULL,
  PRIMARY KEY (Token)
)
ENGINE = INNODB,
AVG_ROW_LENGTH = 16384,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

DELIMITER $$

--
-- Create procedure `Proc_InsertTokenAccount`
--
CREATE DEFINER = 'a7ca4c_bkzalo'@'%'
PROCEDURE Proc_InsertTokenAccount (IN Token varchar(255), IN PhoneNumber varchar(255))
BEGIN
  INSERT INTO tokenaccount (Token, PhoneNumber, CreatedAt)
    VALUES (Token, PhoneNumber, CURRENT_TIMESTAMP());
END
$$

DELIMITER ;

--
-- Create table `conversation`
--
CREATE TABLE conversation (
  ConversationId char(36) DEFAULT NULL,
  AllMemberId text DEFAULT NULL,
  AllReadId text DEFAULT NULL,
  CreatedAt datetime DEFAULT NULL,
  ModifiedAt datetime DEFAULT NULL
)
ENGINE = INNODB,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

DELIMITER $$

--
-- Create procedure `Proc_InsertConversation`
--
CREATE DEFINER = 'a7ca4c_bkzalo'@'%'
PROCEDURE Proc_InsertConversation (IN ConversationId char(36), IN AllMemberId text)
BEGIN
  INSERT INTO conversation (ConversationId, AllMemberId, CreatedAt)
    VALUES (ConversationId, AllMemberId, CURRENT_TIMESTAMP());
END
$$

--
-- Create procedure `Proc_GetPagingConversation`
--
CREATE DEFINER = 'a7ca4c_bkzalo'@'%'
PROCEDURE Proc_GetPagingConversation (IN UserId char(36), IN Indexx int, IN Count int)
BEGIN
  SELECT
    *
  FROM conversation c
  WHERE c.AllMemberId LIKE CONCAT('%', UserId, '%')
  LIMIT Indexx, Count;
END
$$

--
-- Create procedure `Proc_GetConversationById`
--
CREATE DEFINER = 'a7ca4c_bkzalo'@'%'
PROCEDURE Proc_GetConversationById (IN ConversationId char(36))
BEGIN
  SELECT
    *
  FROM conversation c
  WHERE c.ConversationId = ConversationId;
END
$$

DELIMITER ;

--
-- Create table `message`
--
CREATE TABLE message (
  MessageId char(36) NOT NULL DEFAULT '',
  SenderId char(36) DEFAULT NULL,
  ReceiverId char(36) DEFAULT NULL,
  ConversationId char(36) DEFAULT NULL,
  Content text DEFAULT NULL,
  CreatedAt datetime DEFAULT NULL,
  ModifiedAt datetime DEFAULT NULL,
  PRIMARY KEY (MessageId)
)
ENGINE = INNODB,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

DELIMITER $$

--
-- Create procedure `Proc_InsertMessage`
--
CREATE DEFINER = 'a7ca4c_bkzalo'@'%'
PROCEDURE Proc_InsertMessage (IN MessageId char(36), IN SenderId char(36), IN ReceiverId char(36), IN ConversationId char(36), IN Content char(36))
BEGIN
  INSERT INTO message (MessageId, SenderId, ReceiverId, ConversationId, Content, CreatedAt)
    VALUES (MessageId, SenderId, ReceiverId, ConversationId, Content, CURRENT_TIMESTAMP());
END
$$

--
-- Create procedure `Proc_GetMessages`
--
CREATE DEFINER = 'a7ca4c_bkzalo'@'%'
PROCEDURE Proc_GetMessages (IN ConversationId char(36), IN Indexx int, IN Count int)
BEGIN
  SELECT
    *
  FROM message m
  WHERE m.ConversationId = ConversationId
  ORDER BY m.CreatedAt DESC
  LIMIT Indexx, Count;
END
$$

--
-- Create procedure `Proc_GetMessageById`
--
CREATE DEFINER = 'a7ca4c_bkzalo'@'%'
PROCEDURE Proc_GetMessageById (IN MessageId char(36))
BEGIN
  SELECT
    *
  FROM message m
  WHERE m.MessageId = MessageId;
END
$$

--
-- Create procedure `Proc_GetLastMessage`
--
CREATE DEFINER = 'a7ca4c_bkzalo'@'%'
PROCEDURE Proc_GetLastMessage (IN ConversationId varchar(255))
BEGIN
  SELECT
    *
  FROM message m
  WHERE m.ConversationId = ConversationId
  ORDER BY m.CreatedAt DESC
  LIMIT 0, 1;
END
$$

--
-- Create procedure `Proc_DeleteMessageById`
--
CREATE DEFINER = 'a7ca4c_bkzalo'@'%'
PROCEDURE Proc_DeleteMessageById (IN MessageId char(36))
BEGIN
  DELETE
    FROM message
  WHERE message.MessageId = MessageId;
END
$$

DELIMITER ;

--
-- Create table `friend`
--
CREATE TABLE friend (
  FriendId char(36) NOT NULL DEFAULT '',
  IdA char(36) DEFAULT NULL,
  IdB char(36) DEFAULT NULL,
  IsFriend tinyint(1) DEFAULT NULL,
  CreatedAt datetime DEFAULT NULL,
  ModifiedAt datetime DEFAULT NULL,
  PRIMARY KEY (FriendId)
)
ENGINE = INNODB,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

DELIMITER $$

--
-- Create procedure `Proc_UpdateFriend`
--
CREATE DEFINER = 'a7ca4c_bkzalo'@'%'
PROCEDURE Proc_UpdateFriend (IN FriendId char(36), IN IsFriend tinyint(1))
BEGIN
  UPDATE friend f
  SET f.IsFriend = IsFriend
  WHERE f.FriendId = FriendId;
END
$$

--
-- Create procedure `Proc_InsertFriend`
--
CREATE DEFINER = 'a7ca4c_bkzalo'@'%'
PROCEDURE Proc_InsertFriend (IN IdA char(36), IN IdB char(36), IN IsFriend tinyint(1))
BEGIN
  INSERT INTO friend (FriendId, IdA, IdB, IsFriend, CreatedAt)
    VALUES (UUID(), IdA, IdB, IsFriend, CURRENT_TIMESTAMP());
END
$$

--
-- Create procedure `Proc_GetUserFriends`
--
CREATE DEFINER = 'a7ca4c_bkzalo'@'%'
PROCEDURE Proc_GetUserFriends (IN UserId char(36), IN Indexx int, IN Count int)
BEGIN
  SELECT
    *
  FROM friend f
  WHERE (f.IdA = UserId)
  OR (f.IdB = UserId)
  LIMIT Indexx, Count;
END
$$

--
-- Create procedure `Proc_GetRequestedFriend`
--
CREATE DEFINER = 'a7ca4c_bkzalo'@'%'
PROCEDURE Proc_GetRequestedFriend (IN IdB char(36), IN Indexx int, IN Count int)
BEGIN
  SELECT
    *
  FROM friend f
  WHERE f.IdB = IdB
  LIMIT Indexx, Count;
END
$$

--
-- Create procedure `Proc_GetFriend`
--
CREATE DEFINER = 'a7ca4c_bkzalo'@'%'
PROCEDURE Proc_GetFriend (IN IdA char(36), IN IdB char(36))
BEGIN
  SELECT
    *
  FROM friend f
  WHERE f.IdA = IdA
  AND f.IdB = IdB;
END
$$

--
-- Create procedure `Proc_GetCountUserFriends`
--
CREATE DEFINER = 'a7ca4c_bkzalo'@'%'
PROCEDURE Proc_GetCountUserFriends (IN UserId char(36))
BEGIN
  SELECT
    COUNT(f.FriendId) AS Cnt
  FROM friend f
  WHERE (f.IdA = UserId)
  OR (f.IdB = UserId);
END
$$

--
-- Create procedure `Proc_GetCountRequested`
--
CREATE DEFINER = 'a7ca4c_bkzalo'@'%'
PROCEDURE Proc_GetCountRequested (IN IdA char(36))
BEGIN
  SELECT
    COUNT(f.FriendId) AS Cnt
  FROM friend f
  WHERE f.IdA = IdA;
END
$$

--
-- Create procedure `Proc_DeleteFriendById`
--
CREATE DEFINER = 'a7ca4c_bkzalo'@'%'
PROCEDURE Proc_DeleteFriendById (IN FriendId char(36))
BEGIN
  DELETE
    FROM friend
  WHERE friend.FriendId = FriendId;
END
$$

DELIMITER ;

--
-- Create table `post`
--
CREATE TABLE post (
  PostId char(36) NOT NULL DEFAULT '',
  AccountId char(36) DEFAULT NULL,
  Described varchar(1000) DEFAULT NULL,
  AllMediaUrl text DEFAULT NULL,
  AllAccountIdLiked text DEFAULT NULL,
  CanComment tinyint(1) DEFAULT NULL,
  CreatedAt datetime DEFAULT NULL,
  ModifiedAt datetime DEFAULT NULL,
  PRIMARY KEY (PostId)
)
ENGINE = INNODB,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

DELIMITER $$

--
-- Create procedure `Proc_UpdatePost`
--
CREATE DEFINER = 'a7ca4c_bkzalo'@'%'
PROCEDURE Proc_UpdatePost (IN PostId char(36), IN Described varchar(1000), IN AllMediaUrl text, IN AllAccountIdLiked text, IN CanComment tinyint(1))
BEGIN
  UPDATE post p
  SET p.Described = Described,
      p.AllMediaUrl = AllMediaUrl,
      p.AllAccountIdLiked = AllAccountIdLiked,
      p.CanComment = CanComment,
      p.ModifiedAt = CURRENT_TIMESTAMP();
END
$$

--
-- Create procedure `Proc_InsertPost`
--
CREATE DEFINER = 'a7ca4c_bkzalo'@'%'
PROCEDURE Proc_InsertPost (IN PostId char(36), IN AccountId char(36), IN Described varchar(1000), IN AllMediaUrl text, IN CanComment tinyint(1))
BEGIN
  INSERT INTO post (PostId, AccountId, Described, AllMediaUrl, CanComment, CreatedAt)
    VALUES (PostId, AccountId, Described, AllMediaUrl, CanComment, CURRENT_TIMESTAMP());
END
$$

--
-- Create procedure `Proc_GetPostById`
--
CREATE DEFINER = 'a7ca4c_bkzalo'@'%'
PROCEDURE Proc_GetPostById (IN PostId char(36))
BEGIN
  SELECT
    *
  FROM post p
  WHERE p.PostId = PostId;
END
$$

--
-- Create procedure `Proc_GetPagingPost`
--
CREATE DEFINER = 'a7ca4c_bkzalo'@'%'
PROCEDURE Proc_GetPagingPost (IN Indexx int, IN Count int)
BEGIN
  SELECT
    *
  FROM post p
  LIMIT Indexx, Count;
END
$$

--
-- Create procedure `Proc_DeletePostById`
--
CREATE DEFINER = 'a7ca4c_bkzalo'@'%'
PROCEDURE Proc_DeletePostById (IN PostId varchar(255))
BEGIN
  DELETE
    FROM post
  WHERE post.PostId = PostId;
END
$$

--
-- Create procedure `Proc_CheckNewPost`
--
CREATE DEFINER = 'a7ca4c_bkzalo'@'%'
PROCEDURE Proc_CheckNewPost (IN LastTimeStamp datetime)
BEGIN
  SELECT
    p.PostId
  FROM post p
  WHERE p.CreatedAt > LastTimeStamp;
END
$$

DELIMITER ;

--
-- Create table `report`
--
CREATE TABLE report (
  ReportId char(36) NOT NULL DEFAULT '',
  PostId char(36) DEFAULT NULL,
  AccountId char(36) DEFAULT NULL,
  Subject int(3) DEFAULT NULL,
  Details varchar(1000) DEFAULT NULL,
  CreatedAt datetime DEFAULT NULL,
  ModifiedAt datetime DEFAULT NULL,
  PRIMARY KEY (ReportId)
)
ENGINE = INNODB,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create table `comment`
--
CREATE TABLE comment (
  CommentId char(36) NOT NULL DEFAULT '',
  AccountId char(36) DEFAULT NULL,
  Content varchar(1000) DEFAULT NULL,
  PostId char(36) DEFAULT NULL,
  CreatedAt datetime DEFAULT NULL,
  ModifiedAt datetime DEFAULT NULL,
  PRIMARY KEY (CommentId)
)
ENGINE = INNODB,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create table `block`
--
CREATE TABLE block (
  BlockId char(36) NOT NULL DEFAULT '',
  BlockFromId char(36) DEFAULT NULL,
  BlockToId char(36) DEFAULT NULL,
  CreatedAt datetime DEFAULT NULL,
  ModifiedAt datetime DEFAULT NULL,
  PRIMARY KEY (BlockId)
)
ENGINE = INNODB,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

--
-- Create table `account`
--
CREATE TABLE account (
  AccountId char(36) NOT NULL DEFAULT '',
  UserName varchar(100) DEFAULT NULL,
  Password varchar(20) DEFAULT NULL,
  PhoneNumber varchar(30) DEFAULT NULL,
  AvatarUrl varchar(500) DEFAULT NULL,
  CreatedAt datetime DEFAULT NULL,
  ModifiedAt datetime DEFAULT NULL,
  PRIMARY KEY (AccountId)
)
ENGINE = INNODB,
CHARACTER SET utf8,
COLLATE utf8_general_ci;

DELIMITER $$

--
-- Create procedure `Proc_UpdateComment`
--
CREATE DEFINER = 'a7ca4c_bkzalo'@'%'
PROCEDURE Proc_UpdateComment (IN CommentId char(36), IN Content varchar(1000))
BEGIN
  UPDATE comment c
  SET c.Content = Content
  WHERE c.CommentId = CommentId;
END
$$

--
-- Create procedure `Proc_UpdateAccount`
--
CREATE DEFINER = 'a7ca4c_bkzalo'@'%'
PROCEDURE Proc_UpdateAccount (IN AccountId char(36), IN UserName varchar(100), IN Password varchar(20), IN PhoneNumber varchar(30), IN AvatarUrl varchar(500))
BEGIN
  UPDATE account a
  SET a.UserName = UserName,
      a.Password = Password,
      a.PhoneNumber = PhoneNumber,
      a.AvatarUrl = AvatarUrl,
      a.ModifiedAt = CURRENT_TIMESTAMP()
  WHERE a.AccountId = AccountId;
END
$$

--
-- Create procedure `Proc_InsertComment`
--
CREATE DEFINER = 'a7ca4c_bkzalo'@'%'
PROCEDURE Proc_InsertComment (IN CommentId char(36), IN AccountId char(36), IN Content varchar(1000), IN PostId char(36))
BEGIN
  INSERT INTO comment (CommentId, AccountId, Content, PostId, CreatedAt)
    VALUES (CommentId, AccountId, Content, PostId, CURRENT_TIMESTAMP());
END
$$

--
-- Create procedure `Proc_InsertAccount`
--
CREATE DEFINER = 'a7ca4c_bkzalo'@'%'
PROCEDURE Proc_InsertAccount (IN UserName varchar(100), IN Password varchar(20), IN PhoneNumber varchar(30))
BEGIN
  INSERT INTO account (AccountId, UserName, Password, PhoneNumber, CreatedAt)
    VALUES (UUID(), UserName, Password, PhoneNumber, CURRENT_TIMESTAMP());
END
$$

--
-- Create procedure `Proc_GetCommentById`
--
CREATE DEFINER = 'a7ca4c_bkzalo'@'%'
PROCEDURE Proc_GetCommentById (IN CommentId char(36))
BEGIN
  SELECT
    *
  FROM comment c
  WHERE c.CommentId = CommentId;
END
$$

--
-- Create procedure `Proc_GetComment`
--
CREATE DEFINER = 'a7ca4c_bkzalo'@'%'
PROCEDURE Proc_GetComment (IN PostId char(36), IN Indexx int, IN Count int)
BEGIN
  SELECT
    *
  FROM comment c
  WHERE c.PostId = PostId
  LIMIT Indexx, Count;
END
$$

--
-- Create procedure `Proc_GetAccountById`
--
CREATE DEFINER = 'a7ca4c_bkzalo'@'%'
PROCEDURE Proc_GetAccountById (IN AccountId char(36))
BEGIN
  SELECT
    *
  FROM account a
  WHERE a.AccountId = AccountId;
END
$$

--
-- Create procedure `Proc_DeleteCommentById`
--
CREATE DEFINER = 'a7ca4c_bkzalo'@'%'
PROCEDURE Proc_DeleteCommentById (IN CommentId char(36))
BEGIN
  DELETE
    FROM comment
  WHERE comment.CommentId = CommentId;
END
$$

DELIMITER ;

-- 
-- Dumping data for table tokenaccount
--
INSERT INTO tokenaccount VALUES
('bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IjA5NzE4ODMwMjUiLCJuYmYiOjE2MzgxNjAxMjIsImV4cCI6MTY0MDc1MjEyMiwiaWF0IjoxNjM4MTYwMTIyfQ.xufNXs5AV00xcpxMRJJ7SI8zfIUZ1_wHjMFMNw3JV0w', '0971883025', '2021-11-28 20:28:44', NULL);

-- 
-- Dumping data for table report
--
-- Table db_a7ca4c_bkzalo.report does not contain any data (it is empty)

-- 
-- Dumping data for table post
--
-- Table db_a7ca4c_bkzalo.post does not contain any data (it is empty)

-- 
-- Dumping data for table message
--
-- Table db_a7ca4c_bkzalo.message does not contain any data (it is empty)

-- 
-- Dumping data for table friend
--
-- Table db_a7ca4c_bkzalo.friend does not contain any data (it is empty)

-- 
-- Dumping data for table conversation
--
-- Table db_a7ca4c_bkzalo.conversation does not contain any data (it is empty)

-- 
-- Dumping data for table comment
--
-- Table db_a7ca4c_bkzalo.comment does not contain any data (it is empty)

-- 
-- Dumping data for table block
--
-- Table db_a7ca4c_bkzalo.block does not contain any data (it is empty)

-- 
-- Dumping data for table account
--
INSERT INTO account VALUES
('5f8251f3-5058-11ec-9b63-00155e015604', 'string', 'string', '0971883025', NULL, '2021-11-28 06:35:23', NULL);

-- 
-- Restore previous SQL mode
-- 
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;

-- 
-- Enable foreign keys
-- 
/*!40014 SET FOREIGN_KEY_CHECKS = @OLD_FOREIGN_KEY_CHECKS */;